#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 46)
  require '~/Documents/scripts/arduino/robot-tocapelotas/server/parser/handler'
  require '~/Documents/scripts/arduino/robot-tocapelotas/server/parser/tokenizer'
  #attr_reader :handler

  def initialize(t, h = Handler.new())
    @tokenizer = t
    @handler = h
    @current_rhythm = fix_length('4',2) + '_'
    @current_snare = 's'
    super()
  end

  def next_token()
    @tokenizer.next_token()
  end

  def parse()
    do_parse()
  end

  def get_arduino_string(r)
    return @handler.result(r)
  end

  def fix_length(s, l)
    if s.length > l
      abort('You provided a number that was too big')
    else
      return s.rjust(l,'0')
    end
  end

  def distribute_hands(s)
    if @current_snare == 's'
      @current_snare = 'S'
    else
      @current_snare = 's'
    end

    return @current_snare
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,    10,    11,    12,     7,     8,     9,    13,    14,    15,
    16,    17,    20,    21,    22,    23,    24,    25,    29,    20,
    31,    32,    20,    34,    29,    37 ]

racc_action_check = [
     0,     1,     6,     7,     0,     0,     0,     8,     9,    10,
    11,    12,    13,    14,    16,    17,    18,    19,    22,    23,
    24,    26,    28,    31,    32,    34 ]

racc_action_pointer = [
    -2,     1,   nil,   nil,   nil,   nil,    -3,    -2,     2,     3,
     9,     1,     7,     8,    11,   nil,     9,     5,    11,     6,
   nil,   nil,    15,    15,    11,   nil,    16,   nil,    18,   nil,
   nil,    18,    21,   nil,    21,   nil,   nil,   nil ]

racc_action_default = [
   -18,   -18,    -1,    -2,    -3,    -4,   -18,   -18,   -18,   -18,
   -18,   -18,   -18,   -18,   -18,    38,   -18,   -18,   -18,   -13,
   -16,   -15,   -18,   -18,   -18,   -14,    -5,    -7,    -9,   -10,
   -11,   -18,   -18,    -8,   -18,    -6,   -12,   -17 ]

racc_goto_table = [
    18,    27,     1,     2,     3,     4,     5,    26,    36,   nil,
    30,    35,   nil,   nil,   nil,    33 ]

racc_goto_check = [
     9,     7,     1,     2,     3,     4,     5,     6,    10,   nil,
     9,     7,   nil,   nil,   nil,     9 ]

racc_goto_pointer = [
   nil,     2,     3,     4,     5,     6,   -15,   -21,   nil,   -13,
   -26,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,    19 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  1, 13, :_reduce_2,
  1, 13, :_reduce_3,
  1, 13, :_reduce_4,
  5, 16, :_reduce_5,
  3, 18, :_reduce_6,
  1, 18, :_reduce_none,
  2, 19, :_reduce_8,
  1, 19, :_reduce_9,
  1, 20, :_reduce_10,
  5, 14, :_reduce_11,
  7, 15, :_reduce_12,
  1, 21, :_reduce_13,
  2, 21, :_reduce_14,
  3, 17, :_reduce_15,
  1, 23, :_reduce_16,
  1, 22, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 38

racc_token_table = {
  false => 0,
  :error => 1,
  :VARIABLE_NAME => 2,
  :PIECE_TYPE => 3,
  :INTEGER => 4,
  :SPACE => 5,
  :TIME => 6,
  :TEMPO => 7,
  :PLAY => 8,
  "=" => 9,
  "/" => 10,
  "." => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "VARIABLE_NAME",
  "PIECE_TYPE",
  "INTEGER",
  "SPACE",
  "TIME",
  "TEMPO",
  "PLAY",
  "\"=\"",
  "\"/\"",
  "\".\"",
  "$start",
  "document",
  "time_change",
  "tempo_change",
  "motif",
  "play",
  "list",
  "note",
  "piece_type",
  "rhythm",
  "three_digit_integer",
  "two_digit_integer" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 5)
  def _reduce_1(val, _values, result)
    get_arduino_string(result)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 6)
  def _reduce_2(val, _values, result)
    get_arduino_string(result)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 7)
  def _reduce_3(val, _values, result)
    get_arduino_string(result)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 8)
  def _reduce_4(val, _values, result)
    get_arduino_string(result)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 11)
  def _reduce_5(val, _values, result)
    result = [val[0][0..-1], val[4]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_6(val, _values, result)
    result = val[0] + val[2]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_8(val, _values, result)
     result = val[0] + val[1]
                              @current_rhythm = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_9(val, _values, result)
    result = val[0] + @current_rhythm
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_10(val, _values, result)
     aux = val[0]
                            if aux != 'r'
                              aux = distribute_hands(val[0])
                            end
                            result = aux
                          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_11(val, _values, result)
    result = 't' + val[2] + val[4]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_12(val, _values, result)
    result = 'T'+','+val[2]+','+val[6]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_13(val, _values, result)
    result = val[0] + '_'
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_14(val, _values, result)
    result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_15(val, _values, result)
    result = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_16(val, _values, result)
    result = fix_length(val[0], 2)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_17(val, _values, result)
    result = fix_length(val[0], 3)
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
